inv <- cacheSolve(x)
inv
makeCacheMatrix <- function(matrix_storage = matrix()) {
inverse_storage <- NULL                 ## initalizes the storage variable
set <- function(y) {                    ## use to overwrite this special matrix
matrix_storage <<- y            ## matrix stored in parent environment
inverse_storage <<- NULL        ## stored inverse (if any) deleted
}
get <- function() {                     ## returns the special matrix
matrix_storage                  ## available in the parent environment
}
setinverse <- function(solution) {      ## stores the inverse in parent envir.
inverse_storage <<- solution
}
getinverse <- function() {              ## returns the inverse
inverse_storage
}
list( set = set, get = get,             ## returns a list of functions
setinverse = setinverse,
getinverse = getinverse)
}
## This function returns the inverse of a special matrix. It tries to get the inverse
## from the storage. If there is no stored value, the inverse is calculated and stored.
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()       ## tries to get stored inverse
if(!is.null(inverse)) {         ## stored inverse available
message("getting cached data")
}
else {                          ## no stored value: calculates and stores inverse
matrix <- x$get()
inverse <- solve(matrix, ...)   ## calculation
x$setinverse(inverse)           ## storage
}
inverse                         ## returns the inverse
}
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
cacheSolve(x)
n <- matrix(c(-1, -3, 1, 1), 2,2)
x$set(n)
x$get()
cacheSolve(x)
cacheSolve(x)
library(datasets)
data(iris)
?iris
head(iris)
x <- colMeans(iris$Sepal.Length)
colMeans(iris$Sepal.Length)
colMeans(iris[,2])
colMeans(iris)
x <- mean(iris$Sepal.Length)
x
?split
split(iris,iris$Species)
tapply(iris$Sepal.Length,split(iris,iris$Species),mean)
s<- split(iris,iris$Species)
lappy(s, function(x) colMeans(x[,"Sepal.Length"]))
lapply(s, function(x) colMeans(x[,"Sepal.Length"]))
lapply(s, function(x) mean(x[,"Sepal.Length"]))
colMeans(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
s <- split(mtcars,mtcars$cyl)
s
lapply(s, function(x) mean(x[,"mpg"]))
lapply(s, mean(mtcars[,"mpg"]))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
debug(ls)
debug
ls
ls()
ls()
quit
c
c
debug(ls)
ls()
n
n
install.packages("tm")
library("tm")
?tm
??tm
install.packages("ROAuth")
library("ROAuth")
myapp = oauth_app("Coursera_Test",
key="d2fcd18940170794d59d",secret="5568b65670b07e9cd84b20081838b806f37839de")
myapp <- oauth_app("Coursera_Test",
key="d2fcd18940170794d59d",secret="5568b65670b07e9cd84b20081838b806f37839de")
install.packages("httr")
library("httr")
myapp <- oauth_app("Coursera_Test",
key="d2fcd18940170794d59d",secret="5568b65670b07e9cd84b20081838b806f37839de")
sig <- sign_oauth1.0(myapp,
token = "bd42f6b2a263f18063d82c79240e09c17602bd5b")
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "d2fcd18940170794d59d",
secret = "5568b65670b07e9cd84b20081838b806f37839de")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "d2fcd18940170794d59d",
secret = "5568b65670b07e9cd84b20081838b806f37839de")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "d2fcd18940170794d59d",
secret = "5568b65670b07e9cd84b20081838b806f37839de")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "d2fcd18940170794d59d",
secret = "5568b65670b07e9cd84b20081838b806f37839de")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = " f44565a0fd33d6d8a820",
secret = " 5c19f887314209546490d57ed6f0d7f63f21a9aa")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = " f44565a0fd33d6d8a820",
secret = " 5c19f887314209546490d57ed6f0d7f63f21a9aa")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(swirl)
swirl()
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
bye()
swirl()
library(tidyr)
students
?gather
gather(students, students, sex, count, -grade)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex","class"))
submit()
students3
?gather
submit()
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed,failed)
sat
?select
?separate
submit()
submit()
submit()
submit()
submit()
install.packages("~/Desktop/ada_2.0-3.zip", repos = NULL)
install.packages("~/Desktop/rpart_4.1-10.zip", repos = NULL)
library(RecordLinkage)
ClosestMatch2 = function(string, stringVector){
distance = levenshteinSim(string, stringVector);
stringVector[distance == max(distance)]
}
install.packages("~/Desktop/ipred_0.9-5.zip", repos = NULL)
library(RecordLinkage)
ClosestMatch2 = function(string, stringVector){
distance = levenshteinSim(string, stringVector);
stringVector[distance == max(distance)]
}
install.packages("~/Desktop/prodlim_1.5.1.zip", repos = NULL)
library(RecordLinkage)
ClosestMatch2 = function(string, stringVector){
distance = levenshteinSim(string, stringVector);
stringVector[distance == max(distance)]
}
install.packages("~/Desktop/lava_1.4.1.zip", repos = NULL)
library(RecordLinkage)
ClosestMatch2 = function(string, stringVector){
distance = levenshteinSim(string, stringVector);
stringVector[distance == max(distance)]
}
install.packages("~/Desktop/evd_2.3-0.zip", repos = NULL)
}
library(RecordLinkage)
ClosestMatch2 = function(string, stringVector){
distance = levenshteinSim(string, stringVector);
stringVector[distance == max(distance)]
}
install.packages("~/Desktop/xtable_1.7-4.zip", repos = NULL)
library(RecordLinkage)
ClosestMatch2 = function(string, stringVector){
distance = levenshteinSim(string, stringVector);
stringVector[distance == max(distance)]
}
load("~/Desktop/dar3.Rdata")
load("~/Desktop/neo3.Rdata")
ClosestMatch2(neo3[10],dar3)
neo3[10]
result <- ClosestMatch2(neo3[1], dar3)
result
sapply(dar3, function(x) {distance = levenshteinSim(x, neo3);
+     stringVector[distance == max(distance)]})
sapply(dar3, function(x) {distance = levenshteinSim(x, neo3);
+     neo3[distance == max(distance)]})
ClosestMatch3 = function(string){
distance = levenshteinSim(string, neo3);
neo3[distance == max(distance)]
}
ClosestMatch3(dar3[12])
sapply(dar3, function(x) {distance = levenshteinSim(x, neo3); neo3[distance == max(distance)]})
bestmatch <- sapply(dar3, function(x) {distance = levenshteinSim(x, neo3); neo3[distance == max(distance)]})
comparison$neo <- neo3
comparions <- c(neo3, dar3, bestmatch)
head(comparions)
str(comparions)
dim(comparions)
comparison <- cbind(dar3,bestmatch)
dim(comparison)
head(comparison)
view(comparison)
View(comparison)
save("comparison.Rdata", comparison)
save("Desktop/comparison.Rdata", comparison)
?save
save(file="Desktop/comparison.Rdata", comparison)
library(xlsx)
load("~/Desktop/comparison.Rdata")
write.xlsx(comparison, "darvsneo.xlsx")
write.xlsx2(comparison, "darvsneo.xlsx")
?write.xlsx
write.xlsx2(comparison, "darvsneo.xlsx", row.names=F, col.names=F)
getwd()
setwd("D:././R scripts/courseproject/")
body_acc_x_test <- read.table("./test/Inertial Signal/body_acc_x_test.txt")
body_acc_x_test <- read.table("./test/Inertial Signals/body_acc_x_test.txt")
dim(body_acc_x_test)
head(body_acc_x_test)
tail(body_acc_x_test)
features <- read.table("./features.txt")
head(features)
subject_train <- read.table("./test/subject_train.txt")
subject_train <- read.table("./train/subject_train.txt")
head(subject_train)
tail(subject_train)
subject_train[3000]
subject_train[3000,1]
subject_train[4000,1]
x_train <- read.table("./train/X_train.txt")
y_train <- read.table("./train/Y_train.txt")
head(y_train)
head(y_train, n=100)
features <- read.table("./features.txt")
head(features)
head(features, n=200)
activity_labels <- read.table("./activity_labels.txt")
activity_labels
subject_test <- read.table("./train/subject_test.txt")
subject_test <- read.table("./test/subject_test.txt")
x_test <- read.table("./test/X_test.txt")
y_test <- read.table("./test/Y_test.txt")
x <- rbind(x_test,x_train)
y <- rbind(y_test, y_train)
head(y, n=100)
library(dplyr)
dings <- activity_labels[Y]
dings <- activity_labels[y]
dings <- activity_labels[y[,1]]
dings <- activity_labels[y$V1]
names(y)
dings <- y$V1
dings2 <- activity_labels[dings]
dings2 <- activity_labels[V1]
dings2 <- activity_labels$V1
dings2 <- activity_labels$V2
dings3 <- dings2[dings]
head(dings3, n=100)
y <- activity_labels$V2[y$V1]
head(y, n=200)
dim(y)
length(y)
x <- cbind(x,y)
head(x)
subjects <- rbind(subject_test,subject_train)
x <- rbind(x_test,x_train)
x <- cbind(x,y,subjects$V1)
head(x)
head(subject_test)
head(features)
names(x)
names(x) <- features$V2
names(x)
tail(features)
names(x) <- c(features$V2, "activity", "subject")
names(x)
names(x) <- features$V2
names(x)
names(x[562]) <- "activity"
names(x)
names(x)[562] <- "activity"
names(x)
names(x)[562:563] <- c("activity", "subject")
names(x)
names(x)[562:563] <- c("activity", "subject")
test <- x[,grepl("mean"|"std", tolower(colnames(x))]
test <- x[,grepl("mean"|"std", tolower(colnames(x)))]
test <- x[,grepl("mean", tolower(colnames(x)))]
names(test)
test <- grepl("mean", tolower(colnames(x)))
test2 <- grepl("std", tolower(colnames(x)))
test3 <- test + test2
sum(test3)
sum(test)
sum(test2)
test3 <- grepl("mean", tolower(colnames(x))) + grepl("std", tolower(colnames(x)))
sum(test3)
test3 <- as.logical(grepl("mean", tolower(colnames(x))) + grepl("std", tolower(colnames(x))))
sum(test3)
x <- x[,as.logical(grepl("mean", tolower(colnames(x))) + grepl("std", tolower(colnames(x))))]
source("run_analysis.R")
run_analysis
## read data
subject_train <- read.table("./train/subject_train.txt")
x_train <- read.table("./train/X_train.txt")
y_train <- read.table("./train/Y_train.txt")
subject_test <- read.table("./test/subject_test.txt")
x_test <- read.table("./test/X_test.txt")
y_test <- read.table("./test/Y_test.txt")
features <- read.table("./features.txt")
activity_labels <- read.table("./activity_labels.txt")
## merge test and training data
x <- rbind(x_test,x_train)
y <- rbind(y_test, y_train)
subjects <- rbind(subject_test,subject_train)
## name subjects
name(subjects) <- "subjects"
## replace label numbers with label names
y <- activity_labels$V2[y$V1]
names(y) <- "activity"
## rename rows
names(x) <- features$V2
## exclude all columns in x which contain neither "mean" nor "std"
x <- x[,as.logical(grepl("mean", tolower(colnames(x))) + grepl("std", tolower(colnames(x))))]
## add label names and subject to x
x <- cbind(x,y,subjects$V1)
names(x)
source("run_analysis.R")
x <- run_analysis()
names(x)
run_analysis.R
source("run_analysis.R")
names(x)
grepl("mean()", tolower(colnames(x))
)
grepl("mean()", tolower(colnames(x)))
grepl("mean/(/)", tolower(colnames(x)))
grepl("mean/(", tolower(colnames(x)))
grepl("mean//(", tolower(colnames(x)))
grepl("mean\(\)", tolower(colnames(x)))
grepl("mean\\(\\)", tolower(colnames(x)))
source("run_analysis.R")
rm(activity_labels,features,subject_test,subject_train,subjects,x_test,x_train,y,y_test,y_train)
x <- group_by(x, subject, activity)
x <- group_by(x, subjects, activity)
head(x)
summarise(x)
test <- summarise(x)
test
test <- summarise(x, mean)
test <- summarise_each(x, mean)
x  %>% summarise_each(funs(mean))
test <- x  %>% summarise_each(funs(mean))
test
source("run_analysis.R")
write.table(x, file = "./result.txt", row.name=false)
write.table(x, file = "./result.txt", row.name=FALSE)
str(x)
view(x)
View(x)
View(x)
colnames(x)
colnames(x) <- gsub("Acc", "Accelerometer", colnames(x))
colnames(x)
colnames(x) <- gsub("mean\\(\\)", "mean", colnames(x))
colnames(x)
colnames(x) <- gsub("std\\(\\)", "std", colnames(x))
colnames(x)
colnames(x) <- gsub("Gyro", "Gyroscope", colnames(x))
colnames(x)
colnames(x) <- gsub("Mag", "Magnitude", colnames(x))
colnames(x)
colnames(x) <- gsub("BodyBody", "Body", colnames(x))
colnames(x)
colnames(x) <- gsub("^t", "Time", colnames(x))
colnames(x)
colnames(x) <- gsub("^f", "Frequency", colnames(x))
colnames(x)
test <- make.names(colnames(x))
test
colnames(x) <- make.names(colnames(x))
colnames(x) <- gsub("\\.", " ", colnames(x))
colnames(x)
source("run_analysis.R")
View(x)
source("run_analysis.R")
source("run_analysis.R")
View(x)
class(x[,1])
class(x[1,])
test <- x[,1]
class(test$V1)
names(test)
class(test$subjects)
test <- x[,2]
class(test$activity)
test <- x[,3]
class(test)
class(test[1])
class(test[1,])
class(test[,1])
colnames(test) <- "blah"
class(test$blah)
colnames(x)
col <- colnames(x)
col <- gsub("^.*\\] \\", "", col)
col <- gsub(".*\\] \\""", "", col)
col <- gsub(".*\\] \\"", "", col)
col <- gsub("\\"?", "", col)
)
""
col <- gsub("\"?","", col)
col
col <- gsub(".*\"?","", col)
col
col <- colnames(x)
col
col <- gsub("^.*\"?","", col)
col
col <- colnames(x)
col
col <- gsub("^{.}6,"", col)
""
col <- gsub("^{.}6","", col)
col <- gsub("^.{6}","", col)
col
col
col <- colnames(x)
write.table(col, "./cols.txt")
write.table(col, "./cols.txt", row.names=FALSE)
